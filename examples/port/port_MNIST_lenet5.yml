clients:
    # Type
    type: simple

    # The total number of clients
    total_clients: 100

    # The number of clients selected in each round
    per_round: 2

    # Should the clients compute test accuracy locally?
    do_test: false

    # Whether simulate clients or not
    simulation: true
    speed_simulation: true

    # The simulation distribution
    simulation_distribution:
        distribution: zipf
        s: 1.7

server:
    address: 127.0.0.1
    port: 8001
    synchronous: false #true: sychronous, false: port
    simulate_wall_time: true
    minimum_clients_aggregated: 2
    staleness_bound: 1000
#    request_update: true

data:
    datasource: MNIST

    # Where the dataset is located
    data_path: ./data

    # Number of samples in each partition
    partition_size: 600

    # IID or non-IID?
    sampler: iid

    # The concentration parameter for the Dirichlet distribution
    concentration: 0.8

    # The random seed for sampling data
    random_seed: 1

trainer:
    # The type of the trainer
    type: basic

    # The maximum number of training rounds
    rounds: 20

    # Whether the training should use multiple GPUs if available
    parallelized: false

    # Whether to apply differential privacy
    # differential_privacy: true
    # dp_epsilon: 1
    # dp_delta: 0.00001
    # dp_max_grad_norm: 1

    # The maximum number of clients running concurrently
    # The limitation is CUDA memory
    # When max_concurrency equals clients per_round,
    # simulate_wall_time: false
    # Otherwise, simulate_wall_time: true
    max_concurrency: 1

    # The target accuracy
    target_accuracy: 0.97

    # Number of epoches for local training in each communication round
    epochs: 1
    batch_size: 32
    optimizer: SGD
    learning_rate: 0.01
    momentum: 0.9
    weight_decay: 0.0

    # The machine learning model
    model_name: lenet5

algorithm:
    # Aggregation algorithm
    type: fedavg

results:
    # Write the following parameter(s) into a CSV
    types: round, elapsed_time, accuracy

    # Plot results (x_axis-y_axis)
    plot: round-accuracy, elapsed_time-accuracy
