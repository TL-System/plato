clients:
    # Type
    type: simple_personalized

    # The total number of clients
    total_clients: 10

    # The number of clients selected in each round
    per_round: 3

    # Should the clients compute test accuracy locally?
    do_test: true

    # the ratio of clients participanting in training
    participant_clients_ratio: 0.5
    
    # whether maintain and load the trained 
    # personalied model
    # set to be true, each client will load
    # the latest trained personalized model
    persist_personalized_model: False

server:
    type: fedavg_personalized
    address: 127.0.0.1
    port: 8000

    # do personalization 
    # for every `do_personalization_interval` rounds
    # set -1 to do personalized only after the final round
    do_personalization_interval: -1
    # total, participant, nonparticipant
    do_personalization_group: total

data:
    # The training and testing dataset
    datasource: MNIST

    # Number of samples in each partition
    partition_size: 2000

    
    # IID or non-IID?
    sampler: noniid
    testset_sampler: noniid

    # The concentration parameter for the Dirichlet distribution
    concentration: 0.5

    # The random seed for sampling data
    random_seed: 1

trainer:
    # The type of the trainer
    type: basic_personalized
    

    # The maximum number of training rounds
    rounds: 5

    # The maximum number of clients running concurrently
    max_concurrency: 2

    # The target accuracy
    target_accuracy: 0.94

    # Number of epoches for local training in each communication round
    epochs: 3
    batch_size: 32
    optimizer: SGD
    lr_scheduler: MultiStepLR
    loss_criterion: CrossEntropyLoss

    # The machine learning model
    model_name: lenet5

    personalized:
        type: basic_personalized
        # Number of epochs for local training in each communication round
        #   The batch size for the downstream task can be larger as it
        # does not utilize the
        epochs: 10
        batch_size: 12
        optimizer: SGD
        lr_scheduler: StepLR
        loss_criterion: CrossEntropyLoss
        model_name: lenet5


algorithm:
    # Aggregation algorithm
    type: fedavg

parameters:
    optimizer:
        lr: 0.05
        momentum: 0.9
        weight_decay: 0.000001

    learning_rate:
        gamma: 0.1
        milestone_steps: 150ep,350ep

    loss_criterion:
        label_smoothing: 0.5

    model:
        num_classes: 10

    personalized:

        optimizer:
            lr: 0.1
            momentum: 0.9
            weight_decay: 0.0

        learning_rate:
            gamma: 0.3
            step_size: 10

        loss_criterion:
            label_smoothing: 0.5

        model:
            num_classes: 10

