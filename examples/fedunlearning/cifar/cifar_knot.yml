general:
    #------------------- Need modification -------------------
    # The prefix of directories of dataset, models, checkpoints, and results
    base_path: /data/ningxin/infocom

clients:
    # Type
    type: simple

    # Whether client heterogeneity should be simulated
    speed_simulation: true

    # The distribution of client speeds
    simulation_distribution:
        distribution: pareto
        alpha: 1

    # The maximum amount of time for clients to sleep after each epoch
    max_sleep_time: 80

    # Should clients really go to sleep, or should we just simulate the sleep times? The sleep_simulation is true only when speed_simulation is true
    sleep_simulation: true

    # If we are simulating client training times, what is the average training time?
    avg_training_time: 20

    random_seed: 1
    #------------------- Need modification -------------------

    # The total number of clients
    total_clients: 100

    # The number of clients selected in each round
    per_round: 30

    # The round to remove the local data by clients
    # If do_optimized_clustering is true, it needs to add 2.
    # For example, if you want to do the data deletion after round 2
    # You should set it as round 4.
    data_deletion_round: 17

    # The clients which need to delete their local data samples
    clients_requesting_deletion: [1]

    # The percentage to delete the local data by clients
    deleted_data_ratio: 1

server:
    address: 127.0.0.1
    port: 8022
    random_seed: 1

    ping_timeout: 36000
    ping_interval: 36000

    # Should we operate in sychronous mode?
    synchronous: false

    # Should we simulate the wall-clock time on the server? Useful if max_concurrency is specified
    simulate_wall_time: true

    do_test: true

    # Should we do the cluster accuracy test during learning?
    do_clustered_test: true

    # Should be false. Specified in knot
    do_global_test: false

    staleness_bound: 1000

    #------------------- Need modification -------------------

    # The minimum arrival clients that all clusters can aggregrate
    minimum_clients_aggregated: 15

#=================== Only for clustering =================

# The window size that accuracy of each cluster should reach
    window_size: 5

#optimization clustering method; need to be comment when run fedun.py
    do_optimized_clustering: true

# The total number of clusters; need to be comment when run fedun.py
    clusters: 5

data:
    # The training and testing dataset
    datasource: CIFAR10

    # Number of samples in each partition
    partition_size: 5000

    # IID or non-IID?
    sampler: noniid

    # The concentration parameter for the Dirichlet distribution
    concentration: 5

    # The random seed for sampling data
    random_seed: 1

trainer:
    # The type of the trainer
    type: basic

    # Learning rate schedule
    lr_schedule: LambdaLR
    lr_gamma: 0.1
    lr_milestone_steps: 80ep,120ep

    # The machine learning model
    model_name: vgg_16 
    num_classes: 10

    #------------------- Need modification -------------------
    # The maximum number of training rounds
    rounds: 100

    # The maximum number of clients running concurrently
    # Always cacluate by 20G(GPU space on the sim)/size_per_client
    # (client size should always lower than 4G)
    max_concurrency: 5

    # The target accuracy
    target_accuracy: 0.70
   
    # Number of epoches for local training in each communication round
    epochs: 5
    batch_size: 128
    optimizer: Adam
    learning_rate: 0.01
    momentum: 0.9
    weight_decay: 0.0

    # Number of epoches for local training in each communication round
    # epochs: 1
    # batch_size: 128
    # optimizer: AdaHessian
    # learning_rate: 0.001
    # momentum_b1: 0.9
    # momentum_b2: 0.999
    # create_graph: true
    # eps: 1e-8
    # weight_decay: 0.0
    # hessian_power: 1.0

#=================== Only for clustering =================
# The accuracy variance threshold that trigger the stop training sign
    target_accuracy_std: 0.01

algorithm:
    # Aggregation algorithm
    type: fedavg

results:
    #------------------- Need modification -------------------
    types: round, accuracy, clusters_accuracy, elapsed_time
    #types: round, accuracy, elapsed_time
    result_path: results/cifar/knot
